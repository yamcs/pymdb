from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum, auto
from typing import TYPE_CHECKING

from yamcs.pymdb.datatypes import (
    AbsoluteTimeDataType,
    AggregateDataType,
    ArrayDataType,
    BinaryDataType,
    BooleanDataType,
    DataType,
    EnumeratedDataType,
    FloatDataType,
    IntegerDataType,
    Member,
    StringDataType,
)

if TYPE_CHECKING:
    from yamcs.pymdb.systems import System


class AlarmLevel(Enum):
    NORMAL = auto()
    WATCH = auto()
    WARNING = auto()
    DISTRESS = auto()
    CRITICAL = auto()
    SEVERE = auto()


class DataSource(Enum):
    TELEMETERED = auto()
    """A telemetered parameter is one that will have values in telemetry"""

    DERIVED = auto()
    """
    A derived parameter is one that is calculated, usually by an
    :class:`Algorithm`
    """

    CONSTANT = auto()
    """
    A constant parameter is one that is used as a constant in the system
    (e.g. a vehicle id)
    """

    LOCAL = auto()
    """
    A local parameter is one that is used purely by the software locally
    (e.g. a ground command counter)
    """

    GROUND = auto()
    """
    A ground parameter is one that is generated by an asset which is not the
    spacecraft
    """


@dataclass(kw_only=True)
class EnumerationAlarm:
    states: dict[str, AlarmLevel]
    default_level: AlarmLevel = AlarmLevel.NORMAL


@dataclass
class Parameter(DataType):
    name: str
    """Short name of this parameter"""

    system: System
    """System this parameter belongs to"""

    aliases: dict[str, str] = field(default_factory=dict)
    """Alternative names, keyed by namespace"""

    data_source: DataSource = DataSource.TELEMETERED
    """
    The nature of the source entity for which this parameter receives a value
    """

    @property
    def qualified_name(self):
        path = "/" + self.name

        parent = self.system
        while parent:
            path = "/" + parent.name + path
            parent = getattr(parent, "system", None)

        return path


@dataclass(kw_only=True)
class AbsoluteTimeParameter(Parameter, AbsoluteTimeDataType):
    pass


@dataclass(kw_only=True)
class AggregateParameter(Parameter, AggregateDataType):
    members: list[Member] = field(default_factory=list)


@dataclass(kw_only=True)
class ArrayParameter(Parameter, ArrayDataType):
    pass


@dataclass(kw_only=True)
class BinaryParameter(Parameter, BinaryDataType):
    pass


@dataclass(kw_only=True)
class BooleanParameter(Parameter, BooleanDataType):
    pass


@dataclass(kw_only=True)
class EnumeratedParameter(Parameter, EnumeratedDataType):
    alarm: EnumerationAlarm | None = None
    """Specification for alarm monitoring"""


@dataclass(kw_only=True)
class FloatParameter(Parameter, FloatDataType):
    pass


@dataclass(kw_only=True)
class IntegerParameter(Parameter, IntegerDataType):
    pass


@dataclass(kw_only=True)
class StringParameter(Parameter, StringDataType):
    pass
